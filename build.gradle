plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'


group = 'com.innoviti'
version = '0.0.1'
sourceCompatibility = 1.8


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}


ext {
    set('springCloudVersion', 'Greenwich.RELEASE')
}

dependencies {
    compile('org.springframework.data:spring-data-envers')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.retry:spring-retry')
	compile("javax.servlet:jstl")
	compile('mysql:mysql-connector-java')	
    compile('org.springframework.boot:spring-boot-starter-integration')
    
}

dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

war {
    baseName = 'boot-gradle'
    version = '0.0.1-SNAPSHOT'
}
    
//copy config
task copyConfig(type: Copy) {
   into project.buildDir.path+"/libs/config"
   from "config"
}

//copy dependencies
task copyRuntimeLibs(type: Copy) {
   into project.buildDir.path+"/libs/lib"
   from configurations.compile
}    

task createFolder{
   def configDir = new File(project.buildDir.path+"/libs", "config")
   def logDir = new File(project.buildDir.path+"/libs", "log")
   def libDir = new File(project.buildDir.path+"/libs", "lib")

   if(!logDir.exists()) {
       logDir.mkdirs()
   }
   delete configDir
   delete libDir

   libDir.mkdirs()
   configDir.mkdirs()
}

task createDistribution(type: Zip) {
   from project.buildDir.path+"/libs"
   include '*'
   include '*/*' 
   archiveName rootProject.name+'-'+version+'.zip'
   destinationDir(new File(project.buildDir.path, "distributions"))
}

task zip{
dependsOn bootWar
dependsOn 'createFolder',  'copyRuntimeLibs' , 'copyConfig', 'createDistribution'
}